diff --git a/node_modules/graphql-modules-fn/lib/combineContexts.js b/node_modules/graphql-modules-fn/lib/combineContexts.js
index 2e75b86..1d7f088 100644
--- a/node_modules/graphql-modules-fn/lib/combineContexts.js
+++ b/node_modules/graphql-modules-fn/lib/combineContexts.js
@@ -9,105 +9,18 @@ var _reduceAsync = _interopRequireDefault(require("./lib/reduceAsync"));
 
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
-function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }
-
-function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
-
-function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
-
-function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
-
-function combineContexts(_x, _x2) {
-  return _combineContexts.apply(this, arguments);
-}
-
-function _combineContexts() {
-  _combineContexts = _asyncToGenerator(
-  /*#__PURE__*/
-  regeneratorRuntime.mark(function _callee(modules, initialContext) {
-    var contexts, rootContext;
-    return regeneratorRuntime.wrap(function _callee$(_context) {
-      while (1) {
-        switch (_context.prev = _context.next) {
-          case 0:
-            contexts = modules.filter(function (module) {
-              return module.context;
-            }).map(function (module) {
-              return module.context;
-            });
-
-            if (!(typeof initialContext === 'function')) {
-              _context.next = 7;
-              break;
-            }
-
-            _context.next = 4;
-            return initialContext();
-
-          case 4:
-            _context.t0 = _context.sent;
-            _context.next = 8;
-            break;
-
-          case 7:
-            _context.t0 = initialContext;
-
-          case 8:
-            rootContext = _context.t0;
-            return _context.abrupt("return", (0, _reduceAsync.default)(contexts, mergeContext, rootContext));
-
-          case 10:
-          case "end":
-            return _context.stop();
-        }
-      }
-    }, _callee);
-  }));
-  return _combineContexts.apply(this, arguments);
+async function combineContexts(modules, initialContext) {
+  const contexts = modules.filter(module => module.context).map(module => module.context);
+  const rootContext = typeof initialContext === 'function' ? await initialContext() : initialContext;
+  return (0, _reduceAsync.default)(contexts, mergeContext, rootContext);
 }
 
 var _default = combineContexts;
 exports.default = _default;
 
-function mergeContext(_x3, _x4) {
-  return _mergeContext.apply(this, arguments);
-}
-
-function _mergeContext() {
-  _mergeContext = _asyncToGenerator(
-  /*#__PURE__*/
-  regeneratorRuntime.mark(function _callee2(currentContext, nextContext) {
-    var newContext;
-    return regeneratorRuntime.wrap(function _callee2$(_context2) {
-      while (1) {
-        switch (_context2.prev = _context2.next) {
-          case 0:
-            if (!(typeof nextContext === 'function')) {
-              _context2.next = 6;
-              break;
-            }
-
-            _context2.next = 3;
-            return nextContext(currentContext);
-
-          case 3:
-            _context2.t0 = _context2.sent;
-            _context2.next = 7;
-            break;
-
-          case 6:
-            _context2.t0 = nextContext;
-
-          case 7:
-            newContext = _context2.t0;
-            return _context2.abrupt("return", _objectSpread({}, currentContext, newContext));
-
-          case 9:
-          case "end":
-            return _context2.stop();
-        }
-      }
-    }, _callee2);
-  }));
-  return _mergeContext.apply(this, arguments);
+async function mergeContext(currentContext, nextContext) {
+  const newContext = typeof nextContext === 'function' ? await nextContext(currentContext) : nextContext;
+  return { ...currentContext,
+    ...newContext
+  };
 }
\ No newline at end of file
diff --git a/node_modules/graphql-modules-fn/lib/index.js b/node_modules/graphql-modules-fn/lib/index.js
index 8ec874c..726bb27 100644
--- a/node_modules/graphql-modules-fn/lib/index.js
+++ b/node_modules/graphql-modules-fn/lib/index.js
@@ -11,10 +11,6 @@ var _combineContexts = _interopRequireDefault(require("./combineContexts"));
 
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
-function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
-
-function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
-
 /**
  * Bundle modules into
  *
@@ -23,57 +19,20 @@ function _asyncToGenerator(fn) { return function () { var self = this, args = ar
  *
  * @returns {object} `{ schema, context }`
  */
-function bundle() {
-  return _bundle.apply(this, arguments);
-}
-
-function _bundle() {
-  _bundle = _asyncToGenerator(
-  /*#__PURE__*/
-  regeneratorRuntime.mark(function _callee() {
-    var modules,
-        initialContext,
-        _buildServiceDefiniti,
-        schema,
-        errors,
-        context,
-        _args = arguments;
-
-    return regeneratorRuntime.wrap(function _callee$(_context) {
-      while (1) {
-        switch (_context.prev = _context.next) {
-          case 0:
-            modules = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];
-            initialContext = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
-            // Create schema.
-            _buildServiceDefiniti = (0, _apolloTools.buildServiceDefinition)(modules), schema = _buildServiceDefiniti.schema, errors = _buildServiceDefiniti.errors;
-
-            if (!(errors && errors.length > 0)) {
-              _context.next = 5;
-              break;
-            }
-
-            throw new Error(errors.map(function (error) {
-              return error.message;
-            }).join('\n\n'));
-
-          case 5:
-            _context.next = 7;
-            return (0, _combineContexts.default)(modules, initialContext);
-
-          case 7:
-            context = _context.sent;
-            return _context.abrupt("return", {
-              schema: schema,
-              context: context
-            });
-
-          case 9:
-          case "end":
-            return _context.stop();
-        }
-      }
-    }, _callee);
-  }));
-  return _bundle.apply(this, arguments);
+async function bundle(modules = [], initialContext = {}) {
+  // Create schema.
+  const {
+    schema,
+    errors
+  } = (0, _apolloTools.buildServiceDefinition)(modules);
+
+  if (errors && errors.length > 0) {
+    throw new Error(errors.map(error => error.message).join('\n\n'));
+  }
+
+  const context = await (0, _combineContexts.default)(modules, initialContext);
+  return {
+    schema,
+    context
+  };
 }
\ No newline at end of file
diff --git a/node_modules/graphql-modules-fn/lib/lib/reduceAsync.js b/node_modules/graphql-modules-fn/lib/lib/reduceAsync.js
index efdeca7..a80cceb 100644
--- a/node_modules/graphql-modules-fn/lib/lib/reduceAsync.js
+++ b/node_modules/graphql-modules-fn/lib/lib/reduceAsync.js
@@ -7,7 +7,7 @@ exports.default = void 0;
 
 function reduceAsync(array, handler, startingValue) {
   return array.reduce(function (promise, value) {
-    return promise.then(function (acc) {
+    return promise.then(acc => {
       return Promise.resolve(handler(acc, value));
     });
   }, Promise.resolve(startingValue));
